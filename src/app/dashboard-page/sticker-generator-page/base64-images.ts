import { ImagesResponseDataInner } from 'openai';

export const imageBase64Placeholder =
  '';

export const generateDefaultBase64Placeholders = (
  n: number
): ImagesResponseDataInner[] => {
  const defaultBase64Placeholders = Array.from([...Array(n).keys()]);

  return defaultBase64Placeholders.map(() => ({
    b64_json: imageBase64Placeholder,
  }));
};
